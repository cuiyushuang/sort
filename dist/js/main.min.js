(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
'use strict';

function __$styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

//动态生成数组
function num() {
    return Math.floor(Math.random() * 100 + 1);
}
function create(n) {
    var list = [];
    while (list.length < n) {
        var a = num();
        var Onoff = true;
        for (var i = 0; i < list.length; i++) {
            if (list[i] == a) {
                Onoff = false;
                break;
            } else {
                Onoff = true;
            }
        }
        if (Onoff) {
            list.push(a);
        }
    }
    return list;
}
$('createArr').onclick = function () {
    var val1 = $('in').value;
    var val2 = $('import').value;
    if (val2) {
        var pcs = $('import').value.split(',');
        var arr = pcs;
        show(arr);
    } else {
        var _pcs = val1;
        var _arr = create(parseInt(_pcs));
        show(_arr);
    }
};
$('bubble').onclick = function () {
    BubbleSort();
};
//计算最大高度
function getMax(data) {
    var max = data[0];
    for (var i in data) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    return max;
}

//获取元素
function $(id) {
    return document.getElementById(id);
}

function hasClass(elem, cls) {
    cls = cls || '';
    if (cls.replace(/\s/g, '').length == 0) return false; //当cls没有参数时，返回false
    return new RegExp(' ' + cls + ' ').test(' ' + elem.className + ' ');
}

function addClass(ele, cls) {
    if (!hasClass(ele, cls)) {
        ele.className = ele.className == '' ? cls : ele.className + ' ' + cls;
    }
}

function removeClass(elem, cls) {
    if (hasClass(elem, cls)) {
        var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, '') + ' ';
        while (newClass.indexOf(' ' + cls + ' ') >= 0) {
            newClass = newClass.replace(' ' + cls + ' ', ' ');
        }
        elem.className = newClass.replace(/^\s+|\s+$/g, '');
    }
}

function sleep(ms) {
    return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
    });
}

//产生柱状图
function show(data) {
    var maxWidth = 800;
    var maxHeight = 450;
    var maxNum = getMax(data);
    //计算比例
    var percent = maxHeight / maxNum;
    //柱子间隔
    var space = maxWidth / (data.length * 2 + 1);
    var zhuWidth = 800 / (data.length * 2 + 1);
    var spaceWidth = 20;
    $('box').innerHTML = '';
    //循环数据
    for (var i = 0; i < data.length; i++) {
        var liDom = document.createElement('li');
        liDom.style.width = space + 'px';
        var left1 = (i + 1) * spaceWidth + i * zhuWidth;
        liDom.style.height = data[i] * percent + 'px';
        liDom.innerHTML = data[i];
        liDom.style.left = left1 + 'px';
        $("box").appendChild(liDom);
    }
}

async function BubbleSort() {
    var arrC = [];
    var data = document.getElementsByTagName('li');
    data = Array.apply(null, data);
    data.forEach(function (v, i) {
        arrC[i] = v.innerHTML;
    });
    for (var i = 0; i < data.length; i++) {
        var tag = true;
        for (var j = 0; j < data.length - 1 - i; j++) {
            addClass(data[j], 'light');
            addClass(data[j + 1], 'light');
            if (parseInt(arrC[j]) > parseInt(arrC[j + 1])) {
                swap(data[j], data[j + 1]);
                var temp = data[j];
                data[j] = data[j + 1];
                data[j + 1] = temp;
                //更新数据数组
                data.forEach(function (v, i) {
                    arrC[i] = v.innerHTML;
                });
                await sleep(1000);
                tag = false;
            }
            removeClass(data[j], 'light');
            removeClass(data[j + 1], 'light');
        }
        addClass(data[data.length - 1 - i], 'end');
        if (tag) {
            for (var _i = 0; _i < data.length; _i++) {
                addClass(data[_i], 'end');
            }
            break;
        }
    }
}

function swap(ele1, ele2) {
    var dis1 = ele1.offsetLeft;
    var dis2 = ele2.offsetLeft;
    var d1 = dis1;
    var d2 = dis2;
    var timer = setInterval(function () {
        if (dis1 < d2) {
            ele1.style.left = dis1++ + 'px';
        } else {
            clearInterval(timer);
        }
    }, 10);
    var timer2 = setInterval(function () {
        if (d1 < dis2) {
            ele2.style.left = dis2-- + 'px';
        } else {
            clearInterval(timer2);
        }
    }, 10);
    ele2.parentNode.insertBefore(ele2, ele1);
}

}());
